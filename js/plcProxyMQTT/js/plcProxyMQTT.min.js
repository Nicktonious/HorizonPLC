class ClassProxyMQTT{constructor(_mqtt,_subs){this._MQTT=_mqtt,this._Subs={dm:{sensor:[],actuator:[]}},this._SkipData=!1,this._DataSkipInterval=null,Object.on("complete",()=>_mqtt.connect()),Object.on("proxymqtt-sub-sensorall",this.HandlerEvents_proxymqtt_sub_sensorall.bind(this)),Object.on("all-data-raw-get",this.HandlerEvents_all_data_raw.bind(this)),this._MQTT.on("connected",this.OnConnected.bind(this)),this._MQTT.on("publish",this.OnPublish.bind(this)),this._MQTT.on("disconnected",this.OnDisconnected.bind(this)),this._MQTT.on("error",this.OnError.bind(this))}HandlerEvents_all_data_raw(_msg){if(!this._SkipData){const ch_id=_msg.arg[0],topic=(this._Subs.dm.sensor.find(_mapObjs=>_mapObjs.name==ch_id)||{}).address;"string"==typeof topic&&this._MQTT.connected&&this._MQTT.publish(topic,JSON.stringify(_msg.value[0]))}}HandlerEvents_proxymqtt_sub_sensorall(_msg){try{let list=_msg.value;this._Subs.dm.sensor=list[0].sensor||[],this._Subs.dm.actuator=list[0].actuator||[];let sub_topic_list=this._Subs.dm.actuator.map(_mapObj=>_mapObj.address);this._MQTT.subscribe(sub_topic_list),H.Logger.Service.Log({service:"MQTT",level:"I",msg:`MQTT subscribed on topics ${sub_topic_list}`})}catch(e){H.Logger.Service.Log({service:"proxymqtt",level:"E",msg:`Error processing "proxymqtt-sub-sensorall" msg: ${e.message}`})}}OnPublish(pub){const ch_id=(this._Subs.dm.actuator.find(_mapObj=>_mapObj.address==pub.topic)||{}).name;"string"==typeof ch_id&&Object.emit("dm-actuator-set",{arg:[ch_id],value:[pub.message]})}OnDisconnected(){H.Logger.Service.Log({service:"MQTT",level:"I",msg:"MQTT disconnected!"});let c=0,interval=setInterval(()=>{if(this._MQTT.connected)clearInterval(interval);else{if(3==++c)return clearInterval(interval),void H.Logger.Service.Log({service:"MQTT",level:"I",msg:`MQTT failed to reconnect after ${c} retries.`});H.Logger.Service.Log({service:"MQTT",level:"I",msg:"MQTT trying to reconnect.."}),this._MQTT.connect()}},5e3)}OnConnected(){H.Logger.Service.Log({service:"MQTT",level:"I",msg:"MQTT connected!"}),this.EmitEvents_dm_sub_sensorall()}OnError(_errMsg){H.Logger.Service.Log({service:"MQTT",level:"E",msg:`${_errMsg}`})}Send(_topicName,_data){this._MQTT.publish(_topicName,_data)}SetPubMaxFreq(_freq){return!("number"!=typeof _freq||_freq<0)&&(this._DataSkipInterval=setInterval(()=>{this._SkipData=!this._SkipData},1/_freq*1e3),!0)}EmitEvents_dm_sub_sensorall(){let msg={metadata:{source:"proxymqtt"},com:"dm-sub-sensorall"};Object.emit(msg.com,msg)}}exports=ClassProxyMQTT;