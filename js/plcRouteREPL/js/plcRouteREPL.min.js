const SENDING_PERIOD=250;class ClassRouteREPL{constructor(_opts){_opts=_opts||{},this._DefConsole=eval(E.getConsole()),this._IsOn=!1,this._Name="RouteREPL",this._ReconnectTry=0,this._Port=_opts.port||23,this.USBIsActive=!1,this._Sending=!1,Object.on("complete",this.RouteOn.bind(this))}get ConsoleType(){let cons=E.getConsole();return cons?cons.startsWith("Loopback")||"Telnet"==cons?"REMOTE":"USB":"NONE"}RouteOn(){try{this._Server=require("net").createServer(_socket=>{this._Socket&&this._Socket.end(),this._Socket=_socket,_socket.on("close",()=>{this._Socket=null,setTimeout(()=>{this._Socket||this.RouteOff()},50)}),_socket.pipe(LoopbackB),LoopbackB.pipe(_socket),E.setConsole(LoopbackA,{force:!1})}),this._Server.listen(this._Port)}catch(e){H.Logger.Service.Log({service:"RouteREPL",level:"I",msg:e}),++this._ReconnectTry<3?this.RouteOn():(this.RouteOff(),this._ReconnectTry=0)}this._IsOn=!0}Receive(_stdin){LoopbackB.write(_stdin)}isREPLConnected(_flag){return _flag}RouteOff(){E.setConsole(this._DefConsole,{force:!0}),this._Socket&&this._Socket.end(),this._IsOn=!1}SendFile(_fileName){if(!this._Socket)return;let file;E.setConsole(null);try{file=require("Storage").read(_fileName)}catch(e){return void H.Logger.Service.Log({service:this._Name,level:"E",msg:`Error while sending file via TCP: ${e.message}`})}let CHUNKSIZE=384,i=0;this._Sending=!0;let intrv=setInterval(()=>{this._Socket&&this._Socket.conn?i<file.length?(H.Repl.Service._Socket.write(file.substr(i,384)),i+=384):(clearInterval(intrv),this._Sending=!1,E.setConsole(LoopbackA,{force:!1}),setTimeout(()=>{this._Sending||this._Socket.end()},2e3)):this.RouteOff()},SENDING_PERIOD)}}exports=ClassRouteREPL;