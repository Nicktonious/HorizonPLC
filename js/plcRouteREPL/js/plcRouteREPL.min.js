class ClassRouteREPL{constructor(_opts){_opts=_opts||{},this._DefConsole=eval(E.getConsole()),this._IsOn=!1,this._Name="RouteREPL",this._ReconnectTry=0,this._Port=_opts.port||23,Object.on("complete",this.RouteOn.bind(this))}get ConsoleType(){let cons=E.getConsole();return cons?cons.startsWith("Loopback")?"REMOTE":"USB":"NONE"}RouteOn(){try{this._Server=require("net").createServer(_socket=>{this._Socket&&this._Socket.end(),this._Socket=_socket,_socket.on("close",()=>{this._Socket=null,setTimeout(()=>{this._Socket||this.RouteOff()},50)}),_socket.pipe(LoopbackB),LoopbackB.pipe(_socket),E.setConsole(LoopbackA,{force:!0})}),this._Server.listen(this._Port)}catch(e){H.Logger.Service.Log({service:"RouteREPL",level:"I",msg:e}),++this._ReconnectTry<3?this.RouteOn():(this.RouteOff(),this._ReconnectTry=0)}this._IsOn=!0}Receive(_stdin){LoopbackB.write(_stdin)}isREPLConnected(_flag){return _flag}RouteOff(){E.setConsole(this._DefConsole,{force:!0}),this._Socket&&this._Socket.end(),this._IsOn=!1}}exports=ClassRouteREPL;